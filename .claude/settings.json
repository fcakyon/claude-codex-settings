{
  "model": "opusplan",
  "includeCoAuthoredBy": false,
  "env": {
    "CLAUDE_BASH_MAINTAIN_PROJECT_WORKING_DIR": "1",
    "DISABLE_BUG_COMMAND": "1",
    "DISABLE_ERROR_REPORTING": "1",
    "DISABLE_TELEMETRY": "1",
    "ANTHROPIC_DEFAULT_OPUS_MODEL": "claude-opus-4-1-20250805",
    "ANTHROPIC_DEFAULT_SONNET_MODEL": "claude-sonnet-4-20250514"
  },
  "permissions": {
    "allow": [
      "Bash(git add:*)",
      "Bash(git reset:*)",
      "Bash(find:*)",
      "Bash(rg:*)",
      "Bash(echo:*)",
      "Bash(grep:*)",
      "Bash(ls:*)",
      "Bash(source:*)",
      "Bash(gh pr list:*)",
      "Bash(gh pr view:*)",
      "Bash(gh pr diff:*)",
      "WebFetch(domain:docs.litellm.ai)",
      "WebFetch(domain:openai.com)",
      "WebFetch(domain:anthropic.com)",
      "WebFetch(domain:docs.anthropic.com)",
      "WebFetch(domain:github.com)",
      "mcp__tavily__tavily-extract",
      "mcp__tavily__tavily-search",
      "mcp__context7__resolve-library-id",
      "mcp__context7__get-library-docs",
      "mcp__github__get_pull_request",
      "mcp__github__get_pull_request_diff",
      "mcp__github__list_commits",
      "mcp__github__get_pull_request_files",
      "mcp__github__get_workflow_run",
      "mcp__github__get_job_logs",
      "mcp__github__get_issue_comments",
      "mcp__github__get_pull_request_status",
      "mcp__github__list_workflows",
      "mcp__github__list_workflow_runs",
      "mcp__mongodb__list_databases",
      "mcp__mongodb__list_collections",
      "mcp__mongodb__get_collection_schema",
      "mcp__mongodb__collection-indexes"
    ]
  },
  "hooks": {
    "PreToolUse": [
      {
        "matcher": "WebFetch",
        "hooks": [
          {
            "type": "command",
            "command": ".claude/hooks/hook_webfetch_to_tavily_extract.py"
          }
        ]
      },
      {
        "matcher": "mcp__tavily__tavily-extract",
        "hooks": [
          {
            "type": "command",
            "command": ".claude/hooks/hook_tavily_extract_to_advanced.py"
          }
        ]
      },
      {
        "matcher": "WebSearch",
        "hooks": [
          {
            "type": "command",
            "command": ".claude/hooks/hook_websearch_to_tavily_search.py"
          }
        ]
      },
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": ".claude/hooks/hook_enforce_rg_over_grep.py"
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Edit|MultiEdit|Write|Task",
        "hooks": [
          {
            "type": "command",
            "command": "file_path=$(jq -r '.tool_input.file_path // empty' 2>/dev/null); if [[ -n \"$file_path\" && -f \"$file_path\" ]]; then case \"$file_path\" in *.py|*.js|*.jsx|*.ts|*.tsx) if [[ \"$OSTYPE\" == \"darwin\"* ]]; then sed -i '' 's/^[[:space:]]*$//g' \"$file_path\" 2>/dev/null || true; else sed -i 's/^[[:space:]]*$//g' \"$file_path\" 2>/dev/null || true; fi ;; esac; fi"
          },
          {
            "type": "command",
            "command": ".claude/hooks/hook_python_code_quality.py"
          },
          {
            "type": "command",
            "command": ".claude/hooks/hook_prettier_formatting.py"
          },
          {
            "type": "command",
            "command": ".claude/hooks/hook_markdown_formatting.py"
          },
          {
            "type": "command",
            "command": ".claude/hooks/hook_bash_formatting.py"
          }
        ]
      }
    ]
  },
  "statusLine": {
    "type": "command",
    "command": "npx -y ccusage statusline",
    "padding": 0
  }
}
